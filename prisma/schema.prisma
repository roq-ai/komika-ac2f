generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookmark {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  page_number Int
  manga_id    String?  @db.Uuid
  user_id     String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  manga       manga?   @relation(fields: [manga_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model favorite {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  manga_id   String?  @db.Uuid
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  manga      manga?   @relation(fields: [manga_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model manga {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title           String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  bookmark        bookmark[]
  favorite        favorite[]
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  note            note[]
  schedule        schedule[]
}

model note {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String   @db.VarChar(255)
  manga_id   String?  @db.Uuid
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  manga      manga?   @relation(fields: [manga_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  manga       manga[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model schedule {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reading_time DateTime @db.Timestamp(6)
  manga_id     String?  @db.Uuid
  user_id      String?  @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  manga        manga?   @relation(fields: [manga_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  bookmark     bookmark[]
  favorite     favorite[]
  note         note[]
  organization organization[]
  schedule     schedule[]
}
